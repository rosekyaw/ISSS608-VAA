[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website is to record all the courseworks/exercises for the ISSS608-VAA module."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below use p_load() of pacman package to check if tidyverse packages have been installed in the computer. If they are, then they will be launched.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "pacman::p_load(corrplot,ggstatsplot,tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-data",
    "title": "Hands-on Exercise 5",
    "section": "Importing Data",
    "text": "Importing Data\n\nwine <- read_delim(\"data/wine_quality.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#building-a-basic-correlation-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#building-a-basic-correlation-matrix",
    "title": "Hands-on Exercise 5",
    "section": "Building a basic correlation matrix",
    "text": "Building a basic correlation matrix\n\npairs(wine[,1:11])\n\n\n\n\n\npairs(wine[,2:12])"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#drawing-the-lower-corner",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#drawing-the-lower-corner",
    "title": "Hands-on Exercise 5",
    "section": "Drawing the lower corner",
    "text": "Drawing the lower corner\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\npairs(wine[,2:12], lower.panel = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-basic-plot",
    "title": "Hands-on Exercise 5",
    "section": "The basic plot",
    "text": "The basic plot\n\nggstatsplot::ggcorrmat(data = wine, cor.vars = 1:11)\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getting-started-with-corrplot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getting-started-with-corrplot",
    "title": "Hands-on Exercise 5",
    "section": "Getting started with corrplot",
    "text": "Getting started with corrplot\n\nwine.cor <- cor(wine[,1:11],use=\"pairwise.complete.obs\")\n\n\ncorrplot(wine.cor)\n\n\n\n\n\ncorrplot(wine.cor, method = \"ellipse\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-mixed-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-mixed-layout",
    "title": "Hands-on Exercise 5",
    "section": "Working with mixed layout",
    "text": "Working with mixed layout\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "pacman::p_load(tidyverse,ggiraph,patchwork)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#importing-the-data",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#importing-the-data",
    "title": "In-class Exercise 3",
    "section": "Importing the data",
    "text": "Importing the data\n\nexam_data <- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#plotting-the-data",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#plotting-the-data",
    "title": "In-class Exercise 3",
    "section": "Plotting the data",
    "text": "Plotting the data\n\nggplot(data=exam_data,\n       aes(x = MATHS))+\n  geom_dotplot(dotsize=0.5)\n\n\n\n\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\nexam_data$tooltip <- c(paste0(     #<<\n  \"Name = \", exam_data$ID,         #<<\n  \"\\n Class = \", exam_data$CLASS)) #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), #<<\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\nexam_data$tooltip <- c(paste0(     #<<\n  \"Name = \", exam_data$ID,         #<<\n  \"\\n Class = \", exam_data$CLASS)) #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), #<<\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\ntooltip_css <- \"background-color:white; #<<\nfont-style:bold; color:black;\" #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #<<\n    opts_tooltip(    #<<\n      css = tooltip_css)) #<<\n)                         \n\n\n\n\n\n\ntooltip <- function(y, ymax, accuracy = .01) {   #<<\n  mean <- scales::number(y, accuracy = accuracy) #<<\n  sem <- scales::number(ymax - y, accuracy = accuracy) #<<\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem) #<<\n} #<<\n\ngg_point <- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  #<<\n                     tooltip(y, ymax))),  #<<\n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  #<<\n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             #<<\n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)     \n\n\n\n\n\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        #<<\n    opts_hover(css = \"fill: #7e48a8;\"),  #<<\n    opts_hover_inv(css = \"opacity:0.2;\") #<<\n  )                                      #<<  \n)                                        \n\n\n\n\n\n\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              #<<\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)  \n\n\n\n\n\n\np1 <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 <- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 / p2), #<<\n       width_svg = 6,\n       height_svg = 6,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "title: “In-class Exercise 04” author: “YSYK” date: 4 Feb 2023 date-modified: “2023-02-15” execute: echo: true eval: true warning: false format: html editor: visual —"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#install-and-launching-r-packages",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#install-and-launching-r-packages",
    "title": "In-class Exercise 4",
    "section": "Install and launching R packages",
    "text": "Install and launching R packages\n\npacman::p_load(ggstatsplot,tidyverse,ggiraph,patchwork,plotly)\npacman::p_load(readxl, performance, parameters, see)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#section",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#section",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "Importing the data\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \"data\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#visualization",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#visualization",
    "title": "In-class Exercise 4",
    "section": "Visualization",
    "text": "Visualization\n\nWorking with visual variable: plot_ly() method\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH,\n             color = ~RACE,\n             colors = \"Set3\")\n\n\n\n\n\n\n\nCreating an interactive scatter plot: ggplotly() method\n\np <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(dotsize = 1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p) #<<\n\n\n\n\n\n\nggbetweenstats(\n  data = exam_data,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Guarantee_Period  1.04   [1.01, 1.17]         1.02      0.97     [0.86, 0.99]\n        Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n         Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\nHigh Correlation\n\n   Term  VIF   VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n     KM 1.46 [1.37, 1.57]         1.21      0.68     [0.64, 0.73]\n Weight 1.41 [1.32, 1.51]         1.19      0.71     [0.66, 0.76]\n\n\n\ncheck_c <- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\ncheck_n <- check_normality(model1)\nplot(check_n)\n\n\n\n\n\ncheck_h <- check_heteroscedasticity(model1)\nplot(check_h)\n\n\n\n\n\ncheck_model(model1)\n\n\n\n\n\nplot(parameters(model1))\n\n\n\n\n\nggcoefstats(model1, \n            output = \"plot\")\n\n\n\n\n\nmy_sum <- exam_data %>%\n  group_by(RACE) %>%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %>%\n  mutate(se=sd/sqrt(n-1))\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n \n  \n    RACE \n    n \n    mean \n    sd \n    se \n  \n \n\n  \n    Chinese \n    193 \n    76.50777 \n    15.69040 \n    1.132357 \n  \n  \n    Indian \n    12 \n    60.66667 \n    23.35237 \n    7.041005 \n  \n  \n    Malay \n    108 \n    57.44444 \n    21.13478 \n    2.043177 \n  \n  \n    Others \n    9 \n    69.66667 \n    10.72381 \n    3.791438 \n  \n\n\n\n\n# Visualizing the uncertainty of point estimates: ggplot2 methods\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean \n          maths score by rac\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "pacman::p_load(corrplot,ggstatsplot,tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#importing-data",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#importing-data",
    "title": "In-class Exercise 5",
    "section": "Importing Data",
    "text": "Importing Data\n\nwine <- read_delim(\"data/wine_quality.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#building-a-basic-correlation-matrix",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#building-a-basic-correlation-matrix",
    "title": "In-class Exercise 5",
    "section": "Building a basic correlation matrix",
    "text": "Building a basic correlation matrix\n\npairs(wine[,1:11])\n\n\n\n\n\npairs(wine[,2:12])"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#drawing-the-lower-corner",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#drawing-the-lower-corner",
    "title": "In-class Exercise 5",
    "section": "Drawing the lower corner",
    "text": "Drawing the lower corner\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\npairs(wine[,2:12], lower.panel = NULL)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#the-basic-plot",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#the-basic-plot",
    "title": "In-class Exercise 5",
    "section": "The basic plot",
    "text": "The basic plot\n\nggstatsplot::ggcorrmat(data = wine, cor.vars = 1:11)\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#getting-started-with-corrplot",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#getting-started-with-corrplot",
    "title": "In-class Exercise 5",
    "section": "Getting started with corrplot",
    "text": "Getting started with corrplot\n\nwine.cor <- cor(wine[,1:11],use=\"pairwise.complete.obs\")\n\n\ncorrplot(wine.cor)\n\n\n\n\n\ncorrplot(wine.cor, method = \"ellipse\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#working-with-mixed-layout",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#working-with-mixed-layout",
    "title": "In-class Exercise 5",
    "section": "Working with mixed layout",
    "text": "Working with mixed layout\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608-VAA homepage. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "1. The Task\nThe task for take-home exercise 1 is to plot the population pyramid for 9 selected area in Singapore to illustrate the demographic structure of Singapore at planning area level.\n\n\n2. The Data\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022 from Department of Statistics, Singapore is used to plot 9 planning area.\n\n\n3. Step by Step Description\nThe final worksheet is published in https://public.tableau.com/app/profile/yun.shwe.yee.kyaw/viz/Take-home_Ex01_16742356941600/Age-SexPyramid\n\n\n\n\n\n\n\nNo.\nStep\n\n\n\n\n1\nLoad the data file respopagesextod2022.csv into Tableau\n\n\n\n2\nOpen a new worksheet and drag Age to Rows\n\n\n\n3\nSelect Sex and right click. Select Create -> Calculated Field to create two new variables Males and Females\n\n\n\n4\nMales and Females variables are created using condition as shown on these pictures.\n\n\n\n\n5\nDrag PA, Males and Females to the Columns\n\n\n\n6\nRight click on the PA and select Top. Next, sort the PA based on the number of population in descending order and take the top 9 populated areas for plotting age-sex pyramid as shown in the picture.\n\n\n7\nSelect Males axis and right click on it as shown in the picture.\n\n\n\n8\nTick the Reversed as shown in the picture.\n\n\n\n9\nDrag Males variable to SUM(Males) area and change the colour. Do the same for Females variable.\n\n\n\n10\nThe final complete plot with legend is as shown in the picture.\n\n\n\n\n\n\n4. Different Types of Population Pyramid\nPopulation pyramids are useful in illustrating age-sex structure of the population. They also provide information about fertility rate, mortality rate and population growth trend.\nThere are three basic shapes of population pyramids.\nExpansive\nExpansive population pyramids are used to display the population that are growing and most of the populations are in younger age cohorts. Their typical pyramid shape has a wide base and narrow top. Expansive pyramids indicate high fertility, high mortality, low life expectancy, higher population growth rates.\nConstrictive\nConstrictive population pyramids are used to are used to display the population that are shrinking and most of the populations are in older age cohorts. They can often look like beehives and has narrow base. Constrictive pyramids indicate low fertility, low mortality, high life expectancy and ageing of population.\nStationary\nStationary, or near stationary, population pyramids are used to display the populations that are not growing and have equal distribution across age cohorts . They usually have rectangular that get narrower toward the top. Stationary pyramids indicate low fertility, low mortality and high life expectancy.\n\n\n5. Discussion\nThe top 9 most populated planning areas in Singapore are selected out of 55 planning area to do age-sex population pyramid in trellis display. By selecting 9 most populated areas, it can reveal more accurate population growth trend in Singapore,\nThe top 9 most populated planning area is as following.\n\nBedok\nChoa Chu Kang\nHougang\nJurong West\nPunggol\nSengkang\nTampines\nWoodlands\nYishun\n\nThe below picture is the final result of data visualization for 9 planning area.\n\nAs you can see from the picture above, Bedok and Jurong West area display the distinct constrictive population pyramid shapes while the others displays marginally constrictive population pyramid shapes. These plots also reveal that Singapore have low fertility, low mortality, high life expectancy and ageing of population. It also indicates that Singapore is a developed country with ease access of birth control and advanced health care facilities.\n\n\n6. Reference\nPopedadmin. (2022, October 21). What are the different types of population pyramids? Population Education. Retrieved January 22, 2023, from https://populationeducation.org/what-are-different-types-population-pyramids/"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "1. The Task\nThe task for take-home exercise 2 is to critic one of my classmate’ work for take-home exercise 1 in terms of clarity and aesthetics. Then, the original design will be remade using the data visualization design principles and the best practices learned in lesson 1 and 2. The remade design is created using ggplot2, ggplot2 extensions and tidyverse packages.\n\n\n2. The Data\nThe same data from take-home exercise 1 is used. The data is extracted from Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022 from Department of Statistics, Singapore.\nBelow are the steps taken to install packages, load libraries and import data.\n\nInstall packages and load libraries\nInstall tidyverse and ggiraph libraries to use for visualization.\n\n\nShow the code\npacman::p_load(tidyverse,ggiraph)\n\n\n\n\nImport data\nRaw data is imported from respopagesextod2022.csv and put into population_data data frame.\n\n\nShow the code\npopulation_data <- read_csv(\"data/respopagesextod2022.csv\",show_col_types = FALSE)\n\n\n\n\n\n3. The Critique\nIn this section, the original design done by Prachi Ashani will be reviewed in terms of clarity and aesthetics.\nA trellis display with population pyramid is used to illustrate the demographic structure of Singapore for 9 planning areas.\n\n\n\n\n\n\nClarity\n\nThe title is clear and informative and the caption is used to state data source. Each area has its own title to state the planning area and percentages of population for each age group are clearly displayed.\nThe order of Age Groups will be better represented in ascending order in upward direction since it is a common practice for population pyramid. It is also easier to categorize the type of population pyramid such as constrictive type if it is constructed using common practice.\nThe age can be displayed as per the data instead of grouping since the grouping of age can be subjective and can sometimes mislead the information.\n\n\n\nAesthetics\n\nThe overall dsiplay is easy to understand and beautifully illustrated.\nAlthough using the different colors for each age category is aesthetically pleasing, it can distract the audience from grasping the data visualization. It is better to use the same color with different gradients to display the number of population.\nThe percentage can be displayed using the tooltip instead of putting it on the graph. The graph will be cleaner and easier to see from the audience perceptive.\n\n\n\n\n4. The Remake\nThe original design done by tableau will be remade using r with a few modifications for better visualization.\n\nData Wrangling\nThe data is prepared for plotting population pyramid . Firstly, the population_data is filtered for 9 most populous planning areas in Central Singapore by using filter function. Then, 0_to_4 and 5_to_9 values are replaced with 00_to_04 and 05_09 respectively to keep the age variable in ascending order by using str_replace function. Finally, the population data is grouped by using age, sex and population with summation of population for each category.\n\n\nShow the code\nPA_9 <- c(\"Tanglin\",\"Bukit Timah\",\"Downtown Core\",\"Newton\",\"Novena\",\"Orchard\",\"Outram\",\"River Valley\",\"Rochor\")\npopData_9 <- filter(population_data, PA %in% PA_9)\npopData_9$AG<-str_replace(as.character(popData_9$AG),\"^0_to_4$\",\"00_to_04\")\npopData_9$AG<-str_replace(as.character(popData_9$AG),\"5_to_9\",\"05_to_09\")\npopData_9_Group <- popData_9 %>% group_by(PA,AG,Sex)  %>% summarise(Pop = sum(Pop))\n\n\n\n\nPlotting Population Pyramid in Trellis Display\nAfter preparing the suitable data, the population pyramid is plotted using ggplot in trellis display setting for 9 central planning areas. The tooltip is used to displayed the total number of population for each age,sex category.\n\n\nShow the code\npyramidGH <- ggplot(popData_9_Group, aes(x=AG, y=Pop, fill=Sex)) + \n  geom_bar_interactive(data=subset(popData_9_Group, Sex==\"Females\"), stat=\"identity\",aes(tooltip = Pop)) +  \n  geom_bar_interactive(data=subset(popData_9_Group, Sex==\"Males\"), stat=\"identity\",aes(y=Pop*(-1),tooltip=Pop)) + \n  scale_y_continuous(breaks=seq(-4000,4000,2000),labels=abs(seq(-4000,4000,2000))) +\n  coord_flip() + facet_wrap(~ PA) +\n  labs(title=\"Population Pyramid for 9 most Populous Planning Areas in Central Area - June 2022\", x=\"Age\", y=\"Population\", caption = \"Data Source:Department of Statistics,Singapore (SingStat)\")\n\ngirafe(ggobj = pyramidGH )\n\n\n\n\n\n\n\n\n\n5. The Learning Points\nTake home exercise 2 serves as a reflection for take home exercise 1 since I can see the visualization from different perspective through peer review. It make me realize the importance of seeing the visualization from audience perceptive. Take home exercise 2 also helps me to improve my r coding skill through practice as well as more understanding about the functions/features of different library."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "1. The Task\nThe task is to reveal the patterns of resale prices of public housing property in 2022 by residential towns and estates in Singapore. The intention is to help the users to have better data discovery experience by using relevant interactive visualisation techniques.\n\n\n2. The Data\nThe raw data is downloaded from Resale flat princes based on registration date from Jan-2017 onwards from Department of Statistics, Singapore. The data is cleaned up to focus on resale prices of 3/4/5 Room in 2022 before importing.\n\nInstall packages and load libraries\nInstall and load all the relevant libraries to use for visualization.\n\n\nShow the code\npacman::p_load(ggstatsplot,tidyverse,gganimate,performance, ggdist,highcharter,patchwork)\n\n\n\n\nImport data\nRaw data is imported from resaleFlatPrices2022.csv and put into resaleFlatRaw data frame.\n\n\nShow the code\nresaleFlatRaw  <- read_csv(\"data/resaleFlatPrices2022.csv\",show_col_types = FALSE) \n\n\n\n\nData Wrangling\nAfter the raw data is imported, all the number variables are converted into integers type so the statistical analysis can be applied to them. Data conversion of years to months is also done for remaining_lease variable. The resale_price_sqm variable is created to do better comparison between different flat types.\nFirst the remaining_lease column is extracted into remaining_lease_year and remaining_lease_month and converted into integer variables. Next, the NA is replaced with 0 for remaining_lease_month. Lastly, remaining_lease_months variable is created by adding up remaining_lease_year and remaining_lease_month into months.\n\n\nShow the code\nresaleFlat <- resaleFlatRaw %>% \n  mutate(resale_price=as.integer(resale_price)) %>% \n  mutate(floor_area_sqm=as.integer(floor_area_sqm)) %>% \n  mutate(resale_price_psm = resale_price/floor_area_sqm) %>%\n  extract(remaining_lease,c(\"remaining_lease_year\",\"remaining_lease_month\"),\n          \"([0-9]{2}) years ?([0-9]{2})?\",convert=TRUE) %>% \n  mutate(remaining_lease_month=replace_na(remaining_lease_month,0)) %>% \n  mutate(remaining_lease_months=(remaining_lease_year*12)+remaining_lease_month)     %>% select(-c(remaining_lease_year,remaining_lease_month))\n\n\n\n\n\n3. The Visual Analytics\n\nVisualisation of Mean Resale Price per Square Meter across Towns\nThe 1st visualisation is to display the mean resale price per sqm for individual town so that the user can determine the mean resale price fluctuation across towns. The final visualisation is sorted in ascending order for mean resale price per sqm.\n\n\nShow the code\noptions(highcharter.theme = hc_theme_smpl(tooltip = list(valueDecimals = 2)))\n\nresaleFlatmean <- resaleFlat %>% group_by(town) %>% \n  summarise(mean_resale_price_psm = mean(resale_price_psm))\n\nresaleFlatmeanSorted = resaleFlatmean[order(resaleFlatmean$mean_resale_price_psm),]\n\nhc <- resaleFlatmeanSorted %>% \n  hchart('column', hcaes(x = town, y = mean_resale_price_psm)) %>% \n  hc_title(text=\"HDB Mean Resale Price Per Sqm in 2022\", align = \"center\")\n\nhc\n\n\n\n\n\n\n\nBased on the bar chart above, it can be observed that central area has highest mean resale price per sqm while woodlands area ha s lowest mean resale price per sqm. It can deduced from the chart that most of the central region planning areas have higher mean resale price per sqm compared to other regions.\n\n\nDistribution of Resale Price per Square Meter in 2022\nThe 2nd visualisation is to investigate whether mean resale price per sqm in 2022 is increased from mean resale price per sqm in 2021 which is $4,839 according to the MND. So, this is the test.value that will be used.\n\n\nShow the code\np1 <- gghistostats(data = resaleFlat, x = resale_price_psm, \n                   xlab = \"Resale Price Per Sqm\", \n                   title = \"Distribution of Resale Price Per Sqm for HDB in 2022\", \n                   test.value = 4839,\n                   centrality.parameter = \"mean\")\np1\n\n\n\n\n\nAs you can see from the graph above, the mean value of resale price per sqm in 2022 is significantly higher than the mean value of resale price per sqm in 2021. There is also extreme evidence provided by Bayes factor that the mean resale price per sqm in 2022 is higher compared to 2021.\n\n\nComparison of Mean Resale Price per Square Meter between Different Flat Types\nThe 3rd visualisation is compare the mean resale price per square meter for different flat types. It is also to check that the differences in mean resale price per sqm between flat types is statistically significant or not.\n\n\nShow the code\nggbetweenstats(\n  data = resaleFlat,\n  x = flat_type, \n  y = resale_price_psm,\n  type = \"p\",\n  mean.ci = TRUE,\n  xlab = \"Flat Type\", \n  ylab = \"Resale Price Per Sqm\",\n  title = \"Comparison of Resale Price per Sqm across Flat Types in 2022\"\n)\n\n\n\n\n\nFrom the above chart, the mean resale price per sqm across flat types across different flat types is comparable to one another. Moreover, the distribution pattern across different flat type is similar.\n\n\nVisualisation of Resale Price per Square Meter vs Floor Area in Square Meter\nThe 4th visualisation is to reveal the relationship between resale price per square meter and floor area in square meter.To do the visualisation, resale price per sqm and floor are in sqm are binned 4 bins.\n\n\nShow the code\nresaleFlat1 <- resaleFlat %>% \n  mutate(resale_price_psm_bins = cut(resale_price_psm, breaks = c(0,3333,6183,9033,11883,14733))) %>% \n  mutate(floor_area_sqm_bins = cut(floor_area_sqm, breaks = c(0,30,60,90,120,160)))\n\nggbarstats(resaleFlat1, \n           x = resale_price_psm_bins, \n           y = floor_area_sqm_bins, \n           xlab = \"Resale Price per Sqm\",\n           ylab = \"Floor Area Sqm\",\n           legend.title = \"Resale Price per Sqm Bins\",\n           title = \"Resale Price per Sqm vs Floor Area Sqm\")\n\n\n\n\n\nFrom the resulting chart, it can be seen that most of the 30-60 sqm and 120-160 sqm of floor area are sold at lower resale price per sqm compared to 60-120 sqm of floor area. The highest resale price per sqm for 120-160 sqm of floor area is between $6183 and $9033 while The highest resale price per sqm for other floor area is between $9033 and $11883 It can be deduced that resale price per sqm for smaller room can be higher than the bigger room.\n\n\n\nMultiple Linear Regression Model\nThe multiple linear regression model is applied for resale price with different parameters such as flat model, storey range and so on.\n\n\nShow the code\nmodel <- lm(resale_price_psm ~ month + town + storey_range + \n              floor_area_sqm + flat_model + remaining_lease_months, data = resaleFlat)\nmodel\n\n\n\nCall:\nlm(formula = resale_price_psm ~ month + town + storey_range + \n    floor_area_sqm + flat_model + remaining_lease_months, data = resaleFlat)\n\nCoefficients:\n                     (Intercept)                      month2022-02  \n                        1718.924                            40.341  \n                    month2022-03                      month2022-04  \n                          72.452                           148.689  \n                    month2022-05                      month2022-06  \n                         181.689                           251.271  \n                    month2022-07                      month2022-08  \n                         295.773                           306.500  \n                    month2022-09                      month2022-10  \n                         386.920                           438.789  \n                    month2022-11                      month2022-12  \n                         453.446                           490.672  \n                       townBEDOK                        townBISHAN  \n                        -280.283                           784.252  \n                 townBUKIT BATOK                   townBUKIT MERAH  \n                        -864.458                          1003.111  \n               townBUKIT PANJANG                   townBUKIT TIMAH  \n                       -1435.395                          1538.595  \n                townCENTRAL AREA                 townCHOA CHU KANG  \n                        1394.661                         -1665.866  \n                    townCLEMENTI                       townGEYLANG  \n                         240.825                           355.438  \n                     townHOUGANG                   townJURONG EAST  \n                        -827.032                          -921.221  \n                 townJURONG WEST               townKALLANG/WHAMPOA  \n                       -1330.377                           681.763  \n               townMARINE PARADE                     townPASIR RIS  \n                        1318.809                          -962.931  \n                     townPUNGGOL                    townQUEENSTOWN  \n                       -1445.643                          1093.563  \n                   townSEMBAWANG                      townSENGKANG  \n                       -1594.610                         -1521.392  \n                   townSERANGOON                      townTAMPINES  \n                          29.056                          -504.296  \n                   townTOA PAYOH                     townWOODLANDS  \n                         493.312                         -1543.226  \n                      townYISHUN              storey_range04 TO 06  \n                       -1189.617                           185.602  \n            storey_range07 TO 09              storey_range10 TO 12  \n                         339.910                           419.979  \n            storey_range13 TO 15              storey_range16 TO 18  \n                         523.890                           739.191  \n            storey_range19 TO 21              storey_range22 TO 24  \n                        1025.045                          1164.541  \n            storey_range25 TO 27              storey_range28 TO 30  \n                        1384.468                          1761.702  \n            storey_range31 TO 33              storey_range34 TO 36  \n                        1885.688                          2026.521  \n            storey_range37 TO 39              storey_range40 TO 42  \n                        2207.980                          2450.416  \n            storey_range43 TO 45              storey_range46 TO 48  \n                        2662.916                          3437.031  \n            storey_range49 TO 51                    floor_area_sqm  \n                        2908.513                            -6.039  \n         flat_modelAdjoined flat                    flat_modelDBSS  \n                         174.458                          1322.658  \n              flat_modelImproved     flat_modelImproved-Maisonette  \n                          52.275                          1647.555  \n               flat_modelModel A      flat_modelModel A-Maisonette  \n                          33.494                          1145.945  \n              flat_modelModel A2          flat_modelNew Generation  \n                          78.316                           232.176  \n     flat_modelPremium Apartment  flat_modelPremium Apartment Loft  \n                         258.855                           981.651  \n            flat_modelSimplified                flat_modelStandard  \n                         395.000                           157.229  \n               flat_modelTerrace                 flat_modelType S1  \n                        4035.515                          2062.109  \n               flat_modelType S2            remaining_lease_months  \n                        1950.796                             5.038  \n\n\nNext step is to check the multicollinearity of different parameters to resale price.\n\n\nShow the code\ncheck_c <- check_collinearity(model)\ncheck_c\n\n\n# Check for Multicollinearity\n\nLow Correlation\n\n                   Term  VIF   VIF 95% CI Increased SE Tolerance\n                  month 1.03 [1.02, 1.05]         1.02      0.97\n         floor_area_sqm 1.46 [1.44, 1.48]         1.21      0.69\n remaining_lease_months 2.47 [2.42, 2.52]         1.57      0.41\n             flat_model 8.75 [8.55, 8.96]         2.96      0.11\n Tolerance 95% CI\n     [0.95, 0.98]\n     [0.67, 0.70]\n     [0.40, 0.41]\n     [0.11, 0.12]\n\nModerate Correlation\n\n         Term  VIF   VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n storey_range 1.93 [1.90, 1.97]         1.39      0.52     [0.51, 0.53]\n         town 6.81 [6.65, 6.97]         2.61      0.15     [0.14, 0.15]\n\n\n\n\nShow the code\nplot(check_c)\n\n\n\n\n\nFrom the plot, it is illustrated that flat model and town plays more significant role to resale price per square meter while the rest of the parameters has less significant role.\nNext is checking normality of residuals for the model.\n\n\nShow the code\ncheck_n <- check_normality(model)\nplot(check_n)\n\n\n\n\n\nFrom the plot it can be said that the the model residual failed to conform to normality assumption because residual histogram (in cyan colour) is not closed to the theretical histogram (i.e in green).\nVisualizing the Uncertainty of Point Estimates\nThis visualisation is to display the distribution of resale price per sqm by flat model.\n\n\nShow the code\nresaleFlat %>% ggplot(aes(x = flat_model, \n             y = resale_price_psm)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of resale price per sqm of HDB in 2022\",\n    subtitle = \"Gradient + interval plot\") +\n    xlab(\"Flat Model\") + ylab( \"Resale Price per Sqm\") +\n  theme(plot.title = element_text(size=16, hjust=0.5),\n        axis.title.x = element_text(size=15),\n        axis.text.x = element_text(angle=45, hjust=1),\n        axis.title.y = element_text(size=15))  \n\n\n\n\n\nThe confidence interval for different flat type is more or less similar to each other. Type S1 and S2 has higher resale price per sqm compared to the rest.\n\n\n\n4. The Learning Points\nTake-home exercise 3 can help me to familiarize with different analytics approach for statistical testing, building the linear regression model and visualising uncertainty. It also introduce me different librares and functions for visualisation and statistical analysis."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on Exercise 06",
    "section": "",
    "text": "pacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions, ggHoriPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "title": "Hands-on Exercise 06",
    "section": "Plotting Calendar Heatmap",
    "text": "Plotting Calendar Heatmap\n\nImport data\n\nattacks <- read_csv(\"data/eventlog.csv\")\n\n\n\nExamining the data structure\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\n\n\nData Preparation\nStep 1: Deriving weekday and hour of day fields\n\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_times <- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\nBuilding the Calendar Heatmaps\n\ngrouped <- attacks %>% \n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "title": "Hands-on Exercise 06",
    "section": "Plotting Cycle Plot",
    "text": "Plotting Cycle Plot\n\nStep 1: Data Import\n\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\n\nStep 2: Deriving month and year fields\n\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year <- year(ymd(air$`Month-Year`))\n\n\n\nStep 4: Extracting the target country\n\nVietnam <- air %>% \n  select('Vietnam', \n         month, \n         year) %>%\n  filter(year >= 2010)\n\n\n\nStep 5: Computing year average arrivals by month\n\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(Vietnam))\n\n\n\nSrep 6: Plotting the cycle plot\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "title": "Hands-on Exercise 06",
    "section": "Plotting Slopegraph",
    "text": "Plotting Slopegraph\n\nStep 1: Data Import\n\nrice <- read_csv(\"data/rice.csv\")\n\n\n\nStep 2: Plotting the slopegraph\n\nrice %>% \n  mutate(Year = factor(Year)) %>%\n  filter(Year %in% c(1961, 1980)) %>%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Dr. Kam Tin Seong\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-horizon-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-horizon-plot",
    "title": "Hands-on Exercise 06",
    "section": "Plotting Horizon Plot",
    "text": "Plotting Horizon Plot\n\nStep 1: Data Import\n\naverp <- read_csv(\"data/AVERP.csv\") %>% \n  mutate(Date=ym(Date))\n\n\n\nStep 2: Plotting the horizon graph\n\naverp %>% \n  filter(Date >= \"2018-01-01\") %>%\n  ggplot() +\n  geom_horizon(aes(x = Date, y=Values), \n               origin = \"midpoint\", \n               horizonscale = 6)+\n  facet_grid(`Consumer Items`~.) +\n    theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), strip.text.y = element_text(\n    size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()\n    ) +\n    scale_x_date(expand=c(0,0), date_breaks = \"3 month\", date_labels = \"%b%y\") +\n  ggtitle('Average Retail Prices of Selected Consumer Items (Jan 2018 to Dec 2022)')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "title": "Take-home Exercise 4",
    "section": "",
    "text": "Show the code\npacman::p_load(ggstatsplot,tidyverse,gganimate)\n\n\n\n\nShow the code\nimports  <- read_csv(\"data/imports.csv\",show_col_types = FALSE) \nexports  <- read_csv(\"data/exports.csv\",show_col_types = FALSE)"
  }
]